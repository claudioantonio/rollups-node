// (c) Cartesi and individual authors (see AUTHORS)
// SPDX-License-Identifier: Apache-2.0 (see LICENSE)

package main

import (
	"fmt"
	"go/format"
	"os"
	"sort"
	"strings"
	"unicode"

	"golang.org/x/text/cases"
	"golang.org/x/text/language"

	"github.com/BurntSushi/toml"
)

// function names
var functions = []string{}

// A value from the toml global level map.
type EnvGet struct {
	Default *string `toml:"default"`
	GoType  string  `toml:"go-type"`
	Private bool    `toml:"private"`
}

func (e EnvGet) toFunction(env string) string {
	name := toFunctionName(env)
	typ := e.GoType
	get := "get"

	var defaultValue string
	hasDefault := e.Default != nil
	if hasDefault {
		defaultValue = *e.Default
	}

	to_ := []rune(e.GoType)
	to_[0] = unicode.ToUpper(to_[0])
	to := "to" + string(to_)

	args := fmt.Sprintf(`"%s", "%s", %t, %s`, env, defaultValue, hasDefault, to)

	if e.Private {
		name = "get" + name
		typ = "*" + typ
		get += "Optional"
	} else {
		name = "Get" + name
		functions = append(functions, name)
	}

	return fmt.Sprintf("func %s() %s { return %s(%s) }\n", name, typ, get, args)
}

// Splits the string by "_" and joins each substring with the first letter in upper case.
func toFunctionName(env string) string {
	caser := cases.Title(language.English)
	words := strings.Split(env, "_")
	for i, word := range words {
		words[i] = caser.String(word)
	}
	return strings.Join(words, "")
}

func addLine(builder *strings.Builder, s string, a ...any) {
	builder.WriteString(fmt.Sprintf(s, a...))
	builder.WriteString("\n")
}

func main() {
	// reading the toml file
	bytes, err := os.ReadFile("generate/Config.toml")
	if err != nil {
		panic(err)
	}

	// decoding the toml file
	var config map[string]EnvGet
	_, err = toml.Decode(string(bytes), &config)
	if err != nil {
		panic(err)
	}

	// creating the header
	var builder strings.Builder
	addLine(&builder, `// (c) Cartesi and individual authors (see AUTHORS)`)
	addLine(&builder, `// SPDX-License-Identifier: Apache-2.0 (see LICENSE)`)

	addLine(&builder, "")
	addLine(&builder, `// Code generated by internal/config/generate.`)
	addLine(&builder, `// DO NOT EDIT.`)
	addLine(&builder, "")

	addLine(&builder, `package config`)
	addLine(&builder, `import ("time")`)
	addLine(&builder, `type Duration = time.Duration`)

	// adding the <get> functions
	for env, envGet := range config {
		addLine(&builder, envGet.toFunction(env))
	}

	// adding the <getAll> function
	addLine(&builder, `// Calls all the <Get> functions.`)
	addLine(&builder, `func getAll() {`)
	sort.Strings(functions)
	for _, function := range functions {
		addLine(&builder, `%s()`, function)
	}
	addLine(&builder, `}`)

	// assembling the final string
	s := builder.String()
	bytes, err = format.Source([]byte(s))
	if err != nil {
		panic(err)
	}

	// writing to the file
	file, err := os.Create("get.go")
	if err != nil {
		panic(err)
	}
	defer file.Close()
	_, err = file.Write(bytes)
	if err != nil {
		panic(err)
	}
}
